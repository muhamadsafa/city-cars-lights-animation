/*
 * GLUT Shapes Demo
 *
 * Written by Nigel Stewart November 2003
 *
 * This program is test harness for the sphere, cone
 * and torus shapes in GLUT.
 *
 * Spinning wireframe and smooth shaded shapes are
 * displayed until the ESC or q key is pressed.  The
 * number of geometry stacks and slices can be adjusted
 * using the + and - keys.
 */

#ifdef __APPLE__
#include <GLUT/glut.h>
#else

#include <windows.h>
#include <GL/glut.h>
#endif

#include <stdlib.h>



#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <windows.h>
#include <GL/glut.h>
#endif

#include <stdlib.h>
#include <math.h>>
#include<stdio.h>
#include<GL/glut.h>
#include <GL/gl.h>
#include <stdlib.h>
#define SPEED 40.0      //speed of traffic

float i=0;       //movement of car
float m=0;       //movement of clouds
int light=1;     //1 for green-light, 0 for red-light

void draw_pixel(GLint cx, GLint cy)
{
	glBegin(GL_POINTS);
		glVertex2i(cx,cy);
	glEnd();
}

void plotpixels(GLint a,GLint b, GLint x,GLint y)
{
	draw_pixel(x+a,y+b);
	draw_pixel(-x+a,y+b);
	draw_pixel(x+a,-y+b);
	draw_pixel(-x+a,-y+b);
	draw_pixel(y+a,x+b);
	draw_pixel(-y+a,x+b);
	draw_pixel(y+a,-x+b);
	draw_pixel(-y+a,-x+b);
}

void draw_circle(GLint a, GLint b, GLint r)
{
	GLint d=1-r, x=0, y=r;
	while(y>x)
	{
		plotpixels(a,b,x,y);
		if(d<0) d+=2*x+3;
		else
		{
			d+=2*(x-y)+5;
			--y;
		}
		++x;
	}
	plotpixels(a,b,x,y);
}


void draw_object()
{
int l;
{

//langit
glColor3f(1.4,0.4,0.0);
glBegin(GL_POLYGON);
glVertex2f(0,160);
glVertex2f(0,700);
glVertex2f(1100,700);
glVertex2f(1100,160);
glEnd();

//awan1
	for(l=0;l<=20;l++)
	{
		glColor3f(1.0,1.0,1.0);
		draw_circle(160+m,625,l);
	}
	for(l=0;l<=35;l++)
	{
		glColor3f(1.0,1.0,1.0);
		draw_circle(200+m,625,l);
		draw_circle(225+m,625,l);
	}
	for(l=0;l<=20;l++)
	{
		glColor3f(1.0,1.0,1.0);
		draw_circle(265+m,625,l);
	}

//awan2
	for(l=0;l<=20;l++)
	{
		glColor3f(1.0,1.0,1.0);
		draw_circle(370+m,615,l);
}
	for(l=0;l<=35;l++)
	{
		glColor3f(1.0,1.0,1.0);
		draw_circle(410+m,615,l);
		draw_circle(435+m,615,l);
		draw_circle(470+m,615,l);
	}
for(l=0;l<=20;l++)
	{
		glColor3f(1.0,1.0,1.0);
		draw_circle(500+m,615,l);
}

//awan3
	for(l=0;l<=10;l++)
	{
		glColor3f(1.0,1.0,1.0);
		draw_circle(740+m,500,l);
	}
	for(l=0;l<=35;l++)
	{
		glColor3f(1.0,1.0,1.0);
		draw_circle(750+m,500,l);
		draw_circle(775+m,500,l);
	}
	for(l=0;l<=20;l++)
	{
		glColor3f(1.0,1.0,1.0);
		draw_circle(800+m,500,l);

	}


	//awan3
	for(l=0;l<=10;l++)
	{
		glColor3f(1.0,1.0,1.0);
		draw_circle(40+m,500,l);
	}
	for(l=0;l<=35;l++)
	{
		glColor3f(1.0,1.0,1.0);
		draw_circle(50+m,500,l);
		draw_circle(75+m,500,l);
	}
	for(l=0;l<=20;l++)
	{
		glColor3f(1.0,1.0,1.0);
		draw_circle(100+m,500,l);

	}

//star1
glColor3f(1.0,1.0,1.0);
glBegin(GL_TRIANGLES);
glVertex2f(575,653);
glVertex2f(570,645);
glVertex2f(580,645);
glVertex2f(575,642);
glVertex2f(570,650);
glVertex2f(580,650);
glEnd();

//star2
glColor3f(1.0,1.0,1.0);
glBegin(GL_TRIANGLES);
glVertex2f(975,643);
glVertex2f(970,635);
glVertex2f(980,635);
glVertex2f(975,632);
glVertex2f(970,640);
glVertex2f(980,640);
glEnd();

//star3
glColor3f(1.0,1.0,1.0);
glBegin(GL_TRIANGLES);
glVertex2f(875,543);
glVertex2f(870,535);
glVertex2f(880,535);
glVertex2f(875,532);
glVertex2f(870,540);
glVertex2f(880,540);
glEnd();

//star4
glColor3f(1.0,1.0,1.0);
glBegin(GL_TRIANGLES);
glVertex2f(375,598);
glVertex2f(370,590);
glVertex2f(380,590);
glVertex2f(375,587);
glVertex2f(370,595);
glVertex2f(380,595);
glEnd();

//star5
glColor3f(1.0,1.0,1.0);
glBegin(GL_TRIANGLES);
glVertex2f(750,628);
glVertex2f(745,620);
glVertex2f(755,620);
glVertex2f(750,618);
glVertex2f(745,625);
glVertex2f(755,625);
glEnd();

//star6
glColor3f(1.0,1.0,1.0);
glBegin(GL_TRIANGLES);
glVertex2f(200,628);
glVertex2f(195,620);
glVertex2f(205,620);
glVertex2f(200,618);
glVertex2f(195,625);
glVertex2f(205,625);
glEnd();

//star7
glColor3f(1.0,1.0,1.0);
glBegin(GL_TRIANGLES);
glVertex2f(500,543);
glVertex2f(495,535);
glVertex2f(505,535);
glVertex2f(500,532);
glVertex2f(495,540);
glVertex2f(505,540);
glEnd();
}

//  jalan
    glColor3f (0.6, 0.6, 0.6);
    glBegin(GL_POLYGON);
    glVertex2f(0, 0);
    glVertex2f(1100, 0);
    glVertex2f(1100, 200);
    glVertex2f(0, 200);
    glEnd();

    // marka jalan

    glColor3f (0, 0, 0);
    glBegin(GL_POLYGON);
    glVertex2f(80, 100);
    glVertex2f(250, 100);
    glVertex2f(250, 110);
    glVertex2f(80, 110);
    glEnd();

    glColor3f (0, 0, 0);
    glBegin(GL_POLYGON);
    glVertex2f(360, 100);
    glVertex2f(530, 100);
    glVertex2f(530, 110);
    glVertex2f(360, 110);
    glEnd();

    glColor3f (0, 0, 0);
    glBegin(GL_POLYGON);
    glVertex2f(640, 100);
    glVertex2f(810, 100);
    glVertex2f(810, 110);
    glVertex2f(640, 110);
    glEnd();

    // pinggir jalan
    glColor3f (0.0, 0.3, 0);
    glBegin(GL_POLYGON);
    glVertex2f(0, 0);
    glVertex2f(1100, 0);
    glVertex2f(1100, 10);
    glVertex2f(0, 10);
    glEnd();

    glColor3f (0.0, 0.3, 0);
    glBegin(GL_POLYGON);
    glVertex2f(0, 190);
    glVertex2f(1100, 190);
    glVertex2f(1100, 200);
    glVertex2f(0, 200);
    glEnd();

/*//tree
glColor3f(0.9,0.2,0.0);
glBegin(GL_POLYGON);
glVertex2f(350,325);
glVertex2f(350,395);
glVertex2f(365,395);
glVertex2f(365,325);
glEnd();


	for(l=0;l<=30;l++)
	{
		glColor3f(0.0,0.5,0.0);
		draw_circle(340,400,l);
		draw_circle(380,400,l);
	}

	for(l=0;l<=25;l++)
	{
		glColor3f(0.0,0.5,0.0);
		draw_circle(350,440,l);
		draw_circle(370,440,l);
	}

	for(l=0;l<=20;l++)
	{
		glColor3f(0.0,0.5,0.0);
		draw_circle(360,465,l);
	} */

    //matahari
    float li;
    glColor3f(1.5, 0.7, 0);
    glBegin(GL_POLYGON);
    for(int i=0; i<360; i++){
        li = i*3.142/180;
        glVertex2f(520+170*cos(li),420+170*sin(li));
        }
    glEnd();

    // gedung 1 dari kiri
    glColor3f (0, 0, 0);
    glBegin(GL_POLYGON);
    glVertex2f(70, 200);
    glVertex2f(220, 200);
    glVertex2f(220, 420);
    glVertex2f(200, 420);
    glVertex2f(200, 440);
    glVertex2f(180, 440);
    glVertex2f(180, 460);
    glVertex2f(160, 460);
    glVertex2f(90, 420);
    glVertex2f(70, 420);
     glEnd();

    //kaca gedung1
    glColor3f (0, 0, 0.5);
    glBegin(GL_POLYGON);
    glVertex2f(100, 240);
    glVertex2f(190, 240);
    glVertex2f(190, 270);
    glVertex2f(100, 270);
    glEnd();

      glColor3f (0, 0, 0.7);
    glBegin(GL_POLYGON);
    glVertex2f(100, 280);
    glVertex2f(190, 280);
    glVertex2f(190, 310);
    glVertex2f(100, 310);
    glEnd();

     glColor3f (0, 0, 0.9);
    glBegin(GL_POLYGON);
    glVertex2f(100, 320);
    glVertex2f(190, 320);
    glVertex2f(190, 350);
    glVertex2f(100, 350);
    glEnd();

      glColor3f (0, 0, 1);
    glBegin(GL_POLYGON);
    glVertex2f(100, 360);
    glVertex2f(190, 360);
    glVertex2f(190, 390);
    glVertex2f(100, 390);
    glEnd();

    // gedung 2 dari kiri
    glColor3f (0, 0, 0);
    glBegin(GL_POLYGON);
    glVertex2f(221, 200);
    glVertex2f(335, 200);
    glVertex2f(335, 460);
    glVertex2f(280, 460);
    glVertex2f(280, 600);
    glVertex2f(221, 600);
    glVertex2f(221, 460);
    glVertex2f(336, 200);
    glVertex2f(420, 200);
    glVertex2f(420, 415);
    glVertex2f(415, 415);
    glVertex2f(221, 460);
    glEnd();

    //kaca gedung2

     glColor3f (0, 0, 0.5);
    glBegin(GL_POLYGON);
    glVertex2f(251, 240);
    glVertex2f(281, 240);
    glVertex2f(281, 270);
    glVertex2f(251, 270);
    glEnd();

    glColor3f (0, 0, 0.5);
    glBegin(GL_POLYGON);
    glVertex2f(291, 240);
    glVertex2f(321, 240);
    glVertex2f(321, 270);
    glVertex2f(291, 270);
    glEnd();

    glColor3f (0, 0, 0.7);
    glBegin(GL_POLYGON);
    glVertex2f(251, 280);
    glVertex2f(281, 280);
    glVertex2f(281, 310);
    glVertex2f(251, 310);
    glEnd();


    glColor3f (0, 0, 0.7);
    glBegin(GL_POLYGON);
    glVertex2f(291, 280);
    glVertex2f(321, 280);
    glVertex2f(321, 310);
    glVertex2f(291, 310);
    glEnd();

     glColor3f (0, 0, 1);
    glBegin(GL_POLYGON);
    glVertex2f(251, 320);
    glVertex2f(281, 320);
    glVertex2f(281, 350);
    glVertex2f(251, 350);
    glEnd();

    glColor3f (0, 0, 1);
    glBegin(GL_POLYGON);
    glVertex2f(291, 320);
    glVertex2f(321, 320);
    glVertex2f(321, 350);
    glVertex2f(291, 350);
    glEnd();

     glColor3f (1, 1, 1);
    glBegin(GL_POLYGON);
    glVertex2f(251, 360);
    glVertex2f(281, 360);
    glVertex2f(281, 390);
    glVertex2f(251, 390);
    glEnd();

    glColor3f (1, 1, 1);
    glBegin(GL_POLYGON);
    glVertex2f(291, 360);
    glVertex2f(321, 360);
    glVertex2f(321, 390);
    glVertex2f(291, 390);
    glEnd();

    glColor3f (1, 1, 1);
    glBegin(GL_POLYGON);
    glVertex2f(251, 400);
    glVertex2f(281, 400);
    glVertex2f(281, 430);
    glVertex2f(251, 430);
    glEnd();

     glColor3f (0, 0, 0.5);
    glBegin(GL_POLYGON);
    glVertex2f(331, 240);
    glVertex2f(361, 240);
    glVertex2f(361, 270);
    glVertex2f(331, 270);
    glEnd();

    //gedung 3 dari kiri
    glColor3f (0, 0, 0);
    glBegin(GL_POLYGON);
    glVertex2f(421, 200);
    glVertex2f(520, 200);
    glVertex2f(520, 660);
    glVertex2f(421, 660);
    glEnd();

    //kaca gedung3

     glColor3f (1, 1, 1);
    glBegin(GL_POLYGON);
    glVertex2f(441, 600);
    glVertex2f(500, 600);
    glVertex2f(500, 630);
    glVertex2f(441, 630);
    glEnd();

     glColor3f (1, 1, 1);
    glBegin(GL_POLYGON);
    glVertex2f(441, 590);
    glVertex2f(500, 590);
    glVertex2f(500, 560);
    glVertex2f(441, 560);
    glEnd();

     glColor3f (0, 0, 1);
    glBegin(GL_POLYGON);
    glVertex2f(441, 550);
    glVertex2f(500, 550);
    glVertex2f(500, 520);
    glVertex2f(441, 520);
    glEnd();

    glColor3f (0, 0, 1);
    glBegin(GL_POLYGON);
    glVertex2f(441, 510);
    glVertex2f(500, 510);
    glVertex2f(500, 480);
    glVertex2f(441, 480);
    glEnd();

     glColor3f (0, 0, 0.8);
    glBegin(GL_POLYGON);
    glVertex2f(441, 470);
    glVertex2f(500, 470);
    glVertex2f(500, 440);
    glVertex2f(441, 440);
    glEnd();

     glColor3f (0, 0, 0.8);
    glBegin(GL_POLYGON);
    glVertex2f(441, 430);
    glVertex2f(500, 430);
    glVertex2f(500, 400);
    glVertex2f(441, 400);
    glEnd();

    glColor3f (0, 0, 0.8);
    glBegin(GL_POLYGON);
    glVertex2f(441, 420);
    glVertex2f(500, 420);
    glVertex2f(500, 400);
    glVertex2f(441, 400);
    glEnd();

     glColor3f (0, 0, 0.7);
    glBegin(GL_POLYGON);
    glVertex2f(441, 280);
    glVertex2f(500, 280);
    glVertex2f(500, 350);
    glVertex2f(441, 350);
    glEnd();

    glColor3f (0, 0, 0.5);
    glBegin(GL_POLYGON);
    glVertex2f(441, 270);
    glVertex2f(500, 270);
    glVertex2f(500, 240);
    glVertex2f(441, 240);
    glEnd();

    //gedung 4 dari kiri
    glColor3f (0, 0, 0);
    glBegin(GL_POLYGON);
    glVertex2f(521, 200);
    glVertex2f(600, 200);
    glVertex2f(600, 450);
    glVertex2f(521, 400);
    glEnd();

    //kaca gedung4
    glColor3f (0, 0, 0.7);
    glBegin(GL_POLYGON);
    glVertex2f(551, 240);
    glVertex2f(570, 240);
    glVertex2f(570, 350);
    glVertex2f(551, 350);
    glEnd();

     glColor3f (0, 0, 1);
    glBegin(GL_POLYGON);
    glVertex2f(551, 360);
    glVertex2f(570, 360);
    glVertex2f(570, 380);
    glVertex2f(551, 380);
    glEnd();

    //gedung 5 dari kiri
    glColor3f (0, 0, 0);
    glBegin(GL_POLYGON);
    glVertex2f(601, 200);
    glVertex2f(750, 200);
    glVertex2f(750, 530);
    glVertex2f(720, 530);
    glVertex2f(720, 560);
    glVertex2f(700, 560);
    glVertex2f(700, 560);
    glVertex2f(700, 560);
    glVertex2f(601, 530);
    glEnd();

    //kaca gedung5
     glColor3f (0, 0, 0.5);
    glBegin(GL_POLYGON);
    glVertex2f(631, 240);
    glVertex2f(720, 240);
    glVertex2f(720, 270);
    glVertex2f(631, 270);
    glEnd();

      glColor3f (0, 0, 0.7);
    glBegin(GL_POLYGON);
    glVertex2f(631, 300);
    glVertex2f(720, 300);
    glVertex2f(720, 330);
    glVertex2f(631, 330);
    glEnd();

    glColor3f (0, 0, 0.9);
    glBegin(GL_POLYGON);
    glVertex2f(631, 360);
    glVertex2f(720, 360);
    glVertex2f(720, 390);
    glVertex2f(631, 390);
    glEnd();

    glColor3f (0, 0, 1);
    glBegin(GL_POLYGON);
    glVertex2f(631, 420);
    glVertex2f(720, 420);
    glVertex2f(720, 450);
    glVertex2f(631, 450);
    glEnd();

    //gedung 6 dari kiri
    glColor3f (0, 0, 0);
    glBegin(GL_POLYGON);
    glVertex2f(751, 200);
    glVertex2f(930, 200);
    glVertex2f(930, 400);
    glVertex2f(751, 400);
    glEnd();

    //kaca gedung6
    glColor3f (0, 0, 0.5);
    glBegin(GL_POLYGON);
    glVertex2f(781, 240);
    glVertex2f(811, 240);
    glVertex2f(811, 270);
    glVertex2f(781, 270);
    glEnd();

    glColor3f (0, 0, 0.5);
    glBegin(GL_POLYGON);
    glVertex2f(821, 240);
    glVertex2f(851, 240);
    glVertex2f(851, 270);
    glVertex2f(821, 270);
    glEnd();

    glColor3f (0, 0, 0.5);
    glBegin(GL_POLYGON);
    glVertex2f(861, 240);
    glVertex2f(891, 240);
    glVertex2f(891, 270);
    glVertex2f(861, 270);
    glEnd();

    glColor3f (0, 0, 0.7);
    glBegin(GL_POLYGON);
    glVertex2f(781, 280);
    glVertex2f(811, 280);
    glVertex2f(811, 310);
    glVertex2f(781, 310);
    glEnd();

    glColor3f (0, 0, 0.7);
    glBegin(GL_POLYGON);
    glVertex2f(821, 280);
    glVertex2f(851, 280);
    glVertex2f(851, 310);
    glVertex2f(821, 310);
    glEnd();

    glColor3f (0, 0, 1);
    glBegin(GL_POLYGON);
    glVertex2f(861, 280);
    glVertex2f(891, 280);
    glVertex2f(891, 310);
    glVertex2f(861, 310);
    glEnd();

    glColor3f (0, 0, 1);
    glBegin(GL_POLYGON);
    glVertex2f(781, 320);
    glVertex2f(811, 320);
    glVertex2f(811, 350);
    glVertex2f(781, 350);
    glEnd();

    glColor3f (1, 1, 1);
    glBegin(GL_POLYGON);
    glVertex2f(821, 320);
    glVertex2f(851, 320);
    glVertex2f(851, 350);
    glVertex2f(821, 350);
    glEnd();

    glColor3f (1, 1, 1);
    glBegin(GL_POLYGON);
    glVertex2f(861, 320);
    glVertex2f(891, 320);
    glVertex2f(891, 350);
    glVertex2f(861, 350);
    glEnd();

    //rumput kiri

      float rumputsatu;
    glColor3f(0, 0.5, 0);
    glBegin(GL_POLYGON);
    for(int i=0; i<180; i++){
        li = i*3.142/180;
        glVertex2f(115+25*cos(li),200+25*sin(li));
        }
    glEnd();

     float rumputdua;
    glColor3f(0, 0.7, 0);
    glBegin(GL_POLYGON);
    for(int i=0; i<180; i++){
        li = i*3.142/180;
        glVertex2f(75+15*cos(li),200+15*sin(li));
        }
    glEnd();

     float rumputtiga;
    glColor3f(0, 0.9, 0);
    glBegin(GL_POLYGON);
    for(int i=0; i<180; i++){
        li = i*3.142/180;
        glVertex2f(30+35*cos(li),200+35*sin(li));
        }
    glEnd();

      float rumputsepuluh;
    glColor3f(0, 0.5, 0);
    glBegin(GL_POLYGON);
    for(int i=0; i<180; i++){
        li = i*3.142/180;
        glVertex2f(50+25*cos(li),200+25*sin(li));
        }
    glEnd();

    //rumput kanan

     float rumputempat;
    glColor3f(0, 0.5, 0);
    glBegin(GL_POLYGON);
    for(int i=0; i<180; i++){
        li = i*3.142/180;
        glVertex2f(890+25*cos(li),200+25*sin(li));
        }
    glEnd();

     float rumputlima;
    glColor3f(0, 0.7, 0);
    glBegin(GL_POLYGON);
    for(int i=0; i<180; i++){
        li = i*3.142/180;
        glVertex2f(920+15*cos(li),200+15*sin(li));
        }
    glEnd();

     float rumputenam;
    glColor3f(0, 0.9, 0);
    glBegin(GL_POLYGON);
    for(int i=0; i<180; i++){
        li = i*3.142/180;
        glVertex2f(970+35*cos(li),200+35*sin(li));
        }
    glEnd();

    //rumput tengah
    float rumputtujuh;
    glColor3f(0, 0.5, 0);
    glBegin(GL_POLYGON);
    for(int i=0; i<180; i++){
        li = i*3.142/180;
        glVertex2f(500+25*cos(li),200+25*sin(li));
        }
    glEnd();

     float rumputdelapan;
    glColor3f(0, 0.7, 0);
    glBegin(GL_POLYGON);
    for(int i=0; i<180; i++){
        li = i*3.142/180;
        glVertex2f(480+15*cos(li),200+15*sin(li));
        }
    glEnd();


    //mobil1
glColor3f(0.9,0.2,0.0);
glBegin(GL_POLYGON);
glVertex2f(25+i,50);
glVertex2f(25+i,125);
glVertex2f(75+i,200);
glVertex2f(175+i,200);
glVertex2f(200+i,125);
glVertex2f(250+i,115);
glVertex2f(250+i,50);
glEnd();


//kaca
glColor3f(0.1,0.1,0.1);
glBegin(GL_POLYGON);
glVertex2f(35+i,125);
glVertex2f(80+i,190);
glVertex2f(115+i,190);
glVertex2f(115+i,125);
glEnd();

glColor3f(0.1,0.1,0.1);
glBegin(GL_POLYGON);
glVertex2f(125+i,125);
glVertex2f(125+i,190);
glVertex2f(170+i,190);
glVertex2f(190+i,125);
glEnd();


for(l=0;l<20;l++)
   {
	glColor3f(0.0,0.0,0.0);
	draw_circle(75+i,50,l);
	draw_circle(175+i,50,l);
   }

//mobil2

glColor3f(0.0,0.0,1.0);
glBegin(GL_POLYGON);
glVertex2f(-470+i,50);
glVertex2f(-470+i,112);
glVertex2f(-400+i,125);
glVertex2f(-372+i,210);
glVertex2f(-210+i,210);
glVertex2f(-180+i,125);
glVertex2f(-135+i,125);
glVertex2f(-110+i,50);
glEnd();


//kaca2
glColor3f(0.1,0.1,0.1);
glBegin(GL_POLYGON);
glVertex2f(-410+i,125);
glVertex2f(-364+i,200);
glVertex2f(-300+i,200);
glVertex2f(-300+i,125);
glEnd();

glColor3f(0.1,0.1,0.1);
glBegin(GL_POLYGON);
glVertex2f(-290+i,125);
glVertex2f(-290+i,200);
glVertex2f(-217+i,200);
glVertex2f(-192+i,125);
glEnd();


for(l=0;l<30;l++)
   {
	glColor3f(0.0,0.0,0.0);
	draw_circle(-350+i,50,l);
	draw_circle(-200+i,50,l);
   }


    //batukiri
      float batusatu;
    glColor3f(0, 0.5, 0);
    glBegin(GL_POLYGON);
    for(int i=0; i<180; i++){
        li = i*3.142/180;
        glVertex2f(115+25*cos(li),0+25*sin(li));
        }
    glEnd();

     float batudua;
    glColor3f(0, 0.7, 0);
    glBegin(GL_POLYGON);
    for(int i=0; i<180; i++){
        li = i*3.142/180;
        glVertex2f(75+15*cos(li),0+15*sin(li));
        }
    glEnd();

     float batutiga;
    glColor3f(0, 0.9, 0);
    glBegin(GL_POLYGON);
    for(int i=0; i<180; i++){
        li = i*3.142/180;
        glVertex2f(30+35*cos(li),0+35*sin(li));
        }
    glEnd();

      float batusepuluh;
    glColor3f(0, 0.5, 0);
    glBegin(GL_POLYGON);
    for(int i=0; i<180; i++){
        li = i*3.142/180;
        glVertex2f(50+25*cos(li),0+25*sin(li));
        }
    glEnd();

    //batutengah

    float batutujuh;
    glColor3f(0, 0.5, 0);
    glBegin(GL_POLYGON);
    for(int i=0; i<180; i++){
        li = i*3.142/180;
        glVertex2f(500+25*cos(li),0+25*sin(li));
        }
    glEnd();

     float batudelapan;
    glColor3f(0, 0.7, 0);
    glBegin(GL_POLYGON);
    for(int i=0; i<180; i++){
        li = i*3.142/180;
        glVertex2f(480+15*cos(li),0+15*sin(li));
        }
    glEnd();

     float batusembilan;
    glColor3f(0, 0.9, 0);
    glBegin(GL_POLYGON);
    for(int i=0; i<180; i++){
        li = i*3.142/180;
        glVertex2f(540+35*cos(li),0+35*sin(li));
        }
    glEnd();

    //batukanan

     float batuempat;
    glColor3f(0, 0.5, 0);
    glBegin(GL_POLYGON);
    for(int i=0; i<180; i++){
        li = i*3.142/180;
        glVertex2f(890+25*cos(li),0+25*sin(li));
        }
    glEnd();

     float batulima;
    glColor3f(0, 0.7, 0);
    glBegin(GL_POLYGON);
    for(int i=0; i<180; i++){
        li = i*3.142/180;
        glVertex2f(920+15*cos(li),0+15*sin(li));
        }
    glEnd();

     float batuenam;
    glColor3f(0, 0.9, 0);
    glBegin(GL_POLYGON);
    for(int i=0; i<180; i++){
        li = i*3.142/180;
        glVertex2f(970+35*cos(li),0+35*sin(li));
        }
    glEnd();


//signal
//tongkat signal
	glColor3f(0.0,0.0,0.0);
	glBegin(GL_POLYGON);
		glVertex2f(1000,200);
		glVertex2f(1000,350);
		glVertex2f(1010,350);
		glVertex2f(1010,200);
	glEnd();


	glColor3f(0.7,0.7,0.7);
	glBegin(GL_POLYGON);
		glVertex2f(980,350);
		glVertex2f(980,500);
		glVertex2f(1030,500);
		glVertex2f(1030,350);
	glEnd();

	for(l=0;l<=20;l++)
	{
		glColor3f(0.0,0.0,0.0);
		draw_circle(1006,475,l);
		glColor3f(1.0,1.0,0.0);
		draw_circle(1006,425,l);
		glColor3f(0.0,0.0,0.0);
		draw_circle(1006,375,l);
	}

glFlush();
}

void traffic_light()
{
	int l;
if(light==1)
	  {
for(l=0;l<=20;l++)
		{

glColor3f(0.0,0.0,0.0);
		draw_circle(1006,475,l);



		glColor3f(0.0,0.7,0.0);
		draw_circle(1006,375,l);
		}
	  }

	else
	  {

for(l=0;l<=20;l++)
		{
		glColor3f(1.0,0.0,0.0);
		draw_circle(1006,475,l);


		glColor3f(0.0,0.0,0.0);
		draw_circle(1006,375,l);
		}
	  }
}


void idle()
{
glClearColor(1.0,1.0,1.0,1.0);
if(light==0 && (i>=330 && i<=750)) //value of i when first vehicle is near the traffic-signal
 {
	 i+=SPEED/10;
     ++m;
 }

if(light==0 && (i>=830 && i<=1100)) //value of i when second vehicle is near the traffic-signal
 {
	 i+=SPEED/10;
     ++m;
 }

if(light==0 && (i>=1200 && i<=1620))// value of i when third vehicle is near the traffic signal
 {
	 i+=SPEED/10;
     ++m;
 }

if(light==0)
 {
	 i=i;
	 ++m;
 }

else
 {
     i+=SPEED/10;
     ++m;
 }
if(i>1630)
	 i=0.0;
if(m>1100)
	 m=0.0;
glutPostRedisplay();
}

void keyboardFunc( unsigned char key, int x, int y )
{
switch( key )
    {
case 'g':
case 'G':
light=1;
break;

	case 'r':
	case 'R':
		light=0;
		break;
    };

}

void latar()
{
glClearColor(1.0,1.0,1.0,1.0);
glColor3f(0,0.0,0);
glPointSize(2.0);
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
gluOrtho2D(0.0,1100.0,0.0,700.0);
}

void display()
{

glClear(GL_COLOR_BUFFER_BIT);
draw_object();
traffic_light();
glFlush();
}


int main(int argc,char** argv)
{
	glutInit(&argc,argv);
	glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
	glutInitWindowSize(1000,700);
	glutInitWindowPosition(10,10);
	glutCreateWindow("Project UAS");
	glutDisplayFunc(display);
    glutIdleFunc(idle);
	glutKeyboardFunc(keyboardFunc);
	latar();
	glutMainLoop();
	return 0;
}


